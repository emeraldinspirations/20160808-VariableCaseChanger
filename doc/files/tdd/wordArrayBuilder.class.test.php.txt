<?php

include_once '../src/wordArrayBuilder.class.php';
include_once 'classTester.class.php';

class wordArrayBuilderTester extends classTester {
  
  public function test_concatBuffer() {
    $pInstance = new wordArrayBuilder();
    
    $pBuffer = $pInstance->getBuffer();
    if($pBuffer !== '') {
      throw new Exception(
        'ISSUE:     Buffer not empty on construct'."\n" .
        'EXPECTED:  \'\''."\n" .
        'ACTUAL:    '.var_export($pBuffer, TRUE)
      );
    }
    
    $pInstance->concatenateBuffer('This');
    $pInstance->concatenateBuffer('Is');
    $pInstance->concatenateBuffer('A');
    $pInstance->concatenateBuffer('Test');
    $pBuffer = $pInstance->getBuffer();
    if($pBuffer != 'ThisIsATest') {
      throw new Exception(
        'ISSUE:     Concatination failed'."\n" .
        'EXPECTED:  \'ThisIsATest\''."\n" .
        'ACTUAL:    '.var_export($pBuffer, TRUE)
      );
    }
    
    return TRUE;
  }
  
  public function test_resetBuffer() {
    $pInstance = new wordArrayBuilder();
    
    $pInstance->concatenateBuffer('TestContents');
    $pBuffer = $pInstance->getBuffer();
    if($pBuffer != 'TestContents') {
      throw new Exception(
        'ISSUE:     Concatination failed'."\n" .
        'EXPECTED:  \'TestContents\''."\n" .
        'ACTUAL:    '.var_export($pBuffer, TRUE)
      );
    }
    
    $pInstance->resetBuffer();
    $pBuffer = $pInstance->getBuffer();
    if($pBuffer !== '') {
      throw new Exception(
        'ISSUE:     Buffer not empty after reset'."\n" .
        'EXPECTED:  \'\''."\n" .
        'ACTUAL:    '.var_export($pBuffer, TRUE)
      );
    }
    
    return TRUE;
  }
  
  static function array_xor($pArray1, $pArray2) {
    return array_merge(
            array_diff($pArray1, $pArray2),
            array_diff($pArray2, $pArray1)
    );
  }
  
  public function test_pushBuffer() {
    $pInstance = new wordArrayBuilder();
    
    $pArray = $pInstance->toArray();
    if(!is_array($pArray)) {
      throw new Exception(
        'ISSUE:     Array not returned on toArray'."\n".
        'EXPECTED:  []'."\n".
        'ACTUAL:    '.  var_export($pArray, TRUE)
      );
    }
    
    $pInstance->concatenateBuffer('Entry1');
    $pInstance->pushBuffer();
    $pInstance->concatenateBuffer('Entry2');
    $pInstance->pushBuffer();
    $pInstance->concatenateBuffer('Entry3');
    $pInstance->pushBuffer();
    $pActual    = $pInstance->toArray();
    $pExpected  = ['Entry1','Entry2','Entry3'];
    
    if(count(self::array_xor($pActual, $pExpected))) {
      throw new Exception(
        'ISSUE:     Array not populated correctly'."\n".
        'EXPECTED:  '.  var_export($pExpected, TRUE)."\n".
        'ACTUAL:    '.  var_export($pActual, TRUE)
      );
    }
    
    return TRUE;
  }
  
  static function runTests() {
    self::_runTests(__class__);
  }
  
}

wordArrayBuilderTester::runTests();

