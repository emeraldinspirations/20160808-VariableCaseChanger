<?php

/**
 * A quick way to determine the first iteration of a loop
 * 
 * This class is used in a loop oporation to track if it is the first iteration
 * of said loop.  Alternately, this class can also be passed a value in each
 * iteration and only the first value will be retained.
 * 
 * Example:
 * <code>
 *  $pIdentifier = new firstIterationIdentifier();
 *  while ( TRUE ) {
 *    if ( $pIdentifier->isFirst( TRUE ) ) {
 *      // Actions to do only on the first iteration
 *    }
 *    // Actions to do on every iteration
 *  }
 * </code>
 * 
 * @category   QuickTools
 * @package    20160808-VariableCaseChanger
 * @author     Matthew "Juniper" Barlett <emeraldinspirations@gmail.com>
 * @copyright  2016 Matthew "Juniper" Barlett
 * @license    TBD - Draft
 * @version    GIT: $Id$ In development.
 */
class firstIterationIdentifier {
  
  // {{{ constants
  
  const ERROR_CANT_ITERATE_NULL = 1470958522;
  
  // }}}
  // {{{ properties
  
  /**
   * A storage space for the first value passed through iterateValue
   * 
   * When no value has yet been passed, NULL is stored.
   * 
   * @var mixed|null
   * @see self::iterateValue() For the function called to set the value
   */
  protected $_FirstValue        = NULL;
  
  // }}}
  // {{{ functions
  
  /**
   * Returns if iterateValue has been called
   * 
   * This is the main function.  It returns if the iterateValue function had
   * been called before.  It also has an optional parameter to combine
   * the isFirst function with the iterateValue function in a single call.
   * 
   * @param   mixed   an optional value to store.  Pass TRUE (or any non FALSE
   *                  value) to be passed to iterateValue to combine both
   *                  functions into a single call
   * @return  boolian a boolian for if the iterateValue has not been called.
   *                  TRUE  = iterateValue has NOT been called
   *                  FALSE = iterateValue has been called
   * @access  public
   * @see self::iterateValue()  For the function called to set the value
   * @see self::getFirstValue() For the value passed on the first iterateValue
   *                             call
   */
  public function isFirst( $vIterate = FALSE ) {
    
    $pReturn = ! isset($this->_FirstValue);
    
    if($vIterate) {
      $this->iterateValue($vIterate);
    }
    
    return $pReturn;
  }
  
  /**
   * Returns the value set the first time iterateValue is called
   *
   * This function is used when the class is used to store the first value
   * passed, not just if iterateValue has been called.  It returns NULL if
   * iterateValue has not been called, or TRUE if the first time iterateValue
   * was called a specific value was not passed.
   * 
   * @return  mixed|null  the value set the first time iterateValue was called.
   *                      NULL  = iterateValue has NOT been called
   * @access  public
   * @see self::iterateValue()  For the function called to set the value
   * @see self::isFirst()       Get a boolian value indicating if iterateValue
   *                            was called
   */
  public function getFirstValue() {
    
    return $this->_FirstValue;
  }
  
  /**
   * Stores the value passed the first time iterateValue is called
   * 
   * This function should be called each iteration of a loop.  If a parameter is
   * passed the first time iterateValue is called, that value will be stored.
   * If no value is passed, then the default value of TRUE is passed.
   * 
   * Passing FALSE (or any value that casts as FALSE) may cause logic errors in
   * code that does not use the identical comparison operator ( === )
   * 
   * Passing NULL throws an exception as it would result in the class not
   * registering that iterateValue had been called
   * 
   * @param   mixed $vValue the optional value to store if the first iteration.
   *                        If no value is supplied, TRUE (the default value) is
   *                        used.
   * @return  mixed         the value supplied if first iteration.
   *                        FALSE = Not the first iteration
   * @access  public
   * @throws  InvalidArgumentException
   *                        thrown if NULL is passed
   */
  public function iterateValue($vValue = TRUE) {
    
    if(is_null($vValue)) {
      throw new InvalidArgumentException(
        'iterateValue function does not accept NULL as a possible value',
        self::ERROR_CANT_ITERATE_NULL
      );
    } elseif($this->isFirst()) {
      $this->_FirstValue = $vValue;
      return $vValue;
    }
    
    return FALSE;
  }
  
  /**
   * Resets the class
   * 
   * @return  void
   */
  public function reset() {
    
    $this->_FirstValue = NULL;
    
  }
  
}

